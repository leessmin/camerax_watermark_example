package com.example.jc_camerax

import android.Manifest
import android.content.ContentValues
import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.ImageFormat
import android.graphics.Paint
import android.graphics.PorterDuff
import android.graphics.Rect
import android.graphics.YuvImage
import android.media.ImageWriter
import android.os.Handler
import android.os.Looper
import android.provider.MediaStore
import android.util.Log
import android.view.Surface
import androidx.annotation.OptIn
import androidx.annotation.RequiresPermission
import androidx.camera.camera2.interop.ExperimentalCamera2Interop
import androidx.camera.core.CameraEffect
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.Preview
import androidx.camera.core.SurfaceRequest
import androidx.camera.core.UseCaseGroup
import androidx.camera.effects.OverlayEffect
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.lifecycle.awaitInstance
import androidx.camera.video.MediaStoreOutputOptions
import androidx.camera.video.Quality
import androidx.camera.video.QualitySelector
import androidx.camera.video.Recorder
import androidx.camera.video.Recording
import androidx.camera.video.VideoCapture
import androidx.camera.video.VideoRecordEvent
import androidx.core.content.ContextCompat
import androidx.core.graphics.createBitmap
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.ViewModel
import kotlinx.coroutines.awaitCancellation
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import java.io.ByteArrayOutputStream
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.Locale
import java.util.concurrent.Executors

private const val TAG = "CameraPreviewState"

data class CameraPreviewState(
    val surfaceRequest: SurfaceRequest? = null,
    val isRecorder: Boolean = false,
    val record: Recording? = null,
)

// https://developer.android.google.cn/media/camera/camerax/video-capture?hl=zh-cn

class CameraPreviewViewModel() : ViewModel() {
    private val _cameraPreviewState = MutableStateFlow(CameraPreviewState())
    val cameraPreviewState: StateFlow<CameraPreviewState> = _cameraPreviewState.asStateFlow()

    private var _videoCapture: VideoCapture<Recorder>

    val overlayEffect = OverlayEffect(
        CameraEffect.VIDEO_CAPTURE,
        0,
        Handler(Looper.getMainLooper())
    ) {
        Log.e(TAG, "overlayEffect error")
    }.apply {

        val textPaint = Paint().apply {
            color = Color.RED
            textSize = 100f
        }

        // 清除setOnDrawListener的监听
//        clearOnDrawListener()

        // 在每一帧上绘制水印
        setOnDrawListener {

            // 保存当前 Canvas 状态
            it.overlayCanvas.save()

            it.overlayCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR) // 清除上一帧
            it.overlayCanvas.setMatrix(it.sensorToBufferTransform)  // 应用传感器到缓冲区的转换矩阵

            val currentZonedDateTime = ZonedDateTime.now()
            val text =
                currentZonedDateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
            val centerX = it.overlayCanvas.width / 2f
            val centerY = it.overlayCanvas.height / 2f


            // 从中心点旋转canvas画布，使绘制方向变成水平
//            it.overlayCanvas.rotate(-90f, centerX, centerY)
            it.overlayCanvas.drawText(text, centerX, centerY, textPaint) // 在中心绘制文本

            true
        }
    }

    private val cameraPreview = Preview.Builder().build().apply {
        setSurfaceProvider { newSurfaceRequest ->
            _cameraPreviewState.update { it ->
                it.copy(
                    surfaceRequest = newSurfaceRequest
                )
            }
        }
    }

    private var useCaseGroup: UseCaseGroup

    init {
        // 写死的分辨率
        val qualitySelector = QualitySelector.from(Quality.UHD)
        // 构建录制器
        val recorder = Recorder.Builder().setQualitySelector(qualitySelector).build()

        // 视频捕获
        _videoCapture = VideoCapture.withOutput(recorder)

        // 设置录制视频方向为横向
        _videoCapture.targetRotation = Surface.ROTATION_90

        useCaseGroup = UseCaseGroup.Builder()
            .addUseCase(cameraPreview)
            .addUseCase(_videoCapture)
            .addEffect(overlayEffect)
            .build()
    }


    // 绑定摄像头
    suspend fun bindToCamera(appContext: Context, lifecycleOwner: LifecycleOwner) {
        val processCameraProvider = ProcessCameraProvider.awaitInstance(appContext)
        // 绑定摄像头，仅在生命周期启动后运行， 并预览流
        processCameraProvider.bindToLifecycle(
            lifecycleOwner,
            CameraSelector.DEFAULT_BACK_CAMERA,
            useCaseGroup,
        )
        // 完成释放摄像头资源
        try {
            awaitCancellation()
        } finally {
            processCameraProvider.unbindAll()
        }
    }

    // 开始录像
    @RequiresPermission(Manifest.permission.RECORD_AUDIO)
    @OptIn(ExperimentalCamera2Interop::class)
    suspend fun startRecorder(appContext: Context, lifecycleOwner: LifecycleOwner) {
        if (cameraPreviewState.value.isRecorder) {
            // 录像已经开始，不能重复开启
            Log.e(TAG, "录像已经开始，不能重复开启")
            return
        }

        val processCameraProvider = ProcessCameraProvider.awaitInstance(appContext)


//        val cameraInfo = processCameraProvider.availableCameraInfos.filter {
//            Camera2CameraInfo.from(it)
//                .getCameraCharacteristic(CameraCharacteristics.LENS_FACING) == CameraMetadata.LENS_FACING_BACK
//        }
        // 获取支持的分辨率
//        val videoCapabilities = Recorder.getVideoCapabilities(cameraInfo[0])
//        val supportedQualities = videoCapabilities.getSupportedQualities(DynamicRange.HLG_10_BIT)


        try {
            // 将视频捕获器绑定到相机
            processCameraProvider.bindToLifecycle(
                lifecycleOwner, CameraSelector.DEFAULT_BACK_CAMERA, useCaseGroup
            )
        } catch (exc: Exception) {
            Log.e(TAG, "Use case binding failed", exc)
        }

        val name = "CameraX-recording-" + SimpleDateFormat(
            "yyyy-MM-DD HH:mm:ss", Locale.US
        ).format(System.currentTimeMillis()) + ".mp4"

        val contentValues = ContentValues().apply {
            put(MediaStore.Video.Media.DISPLAY_NAME, name)
        }
        val mediaStoreOutput = MediaStoreOutputOptions.Builder(
            appContext.contentResolver, MediaStore.Video.Media.EXTERNAL_CONTENT_URI
        ).setContentValues(contentValues).build()

        // _cameraPreviewState更新record实例
        _cameraPreviewState.update {
            it.copy(
                // 开始录制
                // withAudioEnabled 启动录音
                record = _videoCapture.output.prepareRecording(appContext, mediaStoreOutput)
                    .withAudioEnabled().start(
                        ContextCompat.getMainExecutor(appContext)
                    ) { videoRecordEvent ->
                        when (videoRecordEvent) {
                            is VideoRecordEvent.Start -> {
                                // 开始录制
                            }

                            is VideoRecordEvent.Pause -> {
                                // 录制暂停
                            }

                            is VideoRecordEvent.Resume -> {
                                // 录制恢复
                            }

                            is VideoRecordEvent.Finalize -> {
                                // 录制完成
                            }
                        }
                    },
                isRecorder = true,
            )
        }
    }

    // 停止录像
    fun stopRecorder() {
        if (cameraPreviewState.value.record == null && !cameraPreviewState.value.isRecorder) {
            return
        }
        cameraPreviewState.value.record?.stop()

        _cameraPreviewState.update {
            it.copy(
                record = null, isRecorder = false
            )
        }
    }

}

